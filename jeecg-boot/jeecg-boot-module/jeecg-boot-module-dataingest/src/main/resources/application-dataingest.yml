# DataIngest 数据接入模块配置
# 该配置文件展示了 DataIngest 模块的主要配置项

# NiFi 集成配置
nifi:
  api:
    # NiFi API 基础URL
    base-url: http://localhost:8080/nifi-api
    # API调用超时时间（毫秒）
    timeout: 5000
    # 连接超时时间（毫秒）
    connection-timeout: 3000
    # 读取超时时间（毫秒）
    read-timeout: 10000
  notification:
    # 是否启用NiFi通知
    enabled: true
    # 是否异步通知
    async: true

# Debezium 集群配置
debezium:
  cluster:
    # 是否启用集群模式
    enabled: true
    # 节点ID（默认会自动生成）
    node-id: ${spring.application.name}-${server.port}
    # 心跳间隔（秒）
    heartbeat-interval: 30
    # 任务分配间隔（秒）
    assignment-interval: 60
    # 节点超时时间（秒）
    node-timeout: 180
  storage:
    # Offset存储路径
    offset-path: /tmp/debezium/offsets
    # History存储路径  
    history-path: /tmp/debezium/history
  processing:
    # 批量处理大小
    batch-size: 1000
    # 处理间隔（毫秒）
    process-interval: 5000
    # 最大重试次数
    max-retry: 3

# Redis 配置（用于集群协调）
spring:
  redis:
    # Redis服务器地址
    host: localhost
    # Redis服务器端口
    port: 6379
    # Redis数据库索引
    database: 0
    # 连接超时时间
    timeout: 3000ms
    # 连接池配置
    lettuce:
      pool:
        # 连接池最大连接数
        max-active: 20
        # 连接池最大空闲连接数
        max-idle: 10
        # 连接池最小空闲连接数
        min-idle: 5
        # 连接池最大等待时间
        max-wait: -1ms

# 数据源配置（PostgreSQL目标库）
  datasource:
    # 数据库连接URL
    url: jdbc:postgresql://localhost:5432/jeecg_boot
    # 数据库用户名
    username: postgres
    # 数据库密码
    password: your_password
    # 数据库驱动
    driver-class-name: org.postgresql.Driver
    # Hikari连接池配置
    hikari:
      # 连接池最大连接数
      maximum-pool-size: 30
      # 连接池最小空闲连接数
      minimum-idle: 10
      # 连接超时时间
      connection-timeout: 30000
      # 空闲超时时间
      idle-timeout: 600000
      # 连接最大生命周期
      max-lifetime: 1800000

# 日志配置
logging:
  level:
    # DataIngest模块日志级别
    org.jeecg.dataingest: DEBUG
    # Debezium日志级别
    io.debezium: INFO
    # SQL日志级别
    org.jeecg.common.util.SqlInjectionUtil: INFO
  pattern:
    # 控制台日志格式
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
    # 文件日志格式
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"
  file:
    # 日志文件路径
    name: logs/dataingest.log
    # 日志文件最大大小
    max-size: 100MB
    # 日志文件保留天数
    max-history: 30

# 监控配置
management:
  endpoints:
    web:
      exposure:
        # 暴露的监控端点
        include: health,info,metrics,prometheus
  endpoint:
    health:
      # 显示健康检查详情
      show-details: always
  metrics:
    export:
      prometheus:
        # 启用Prometheus监控
        enabled: true

# 自定义配置
dataingest:
  # 数据质量配置
  data-quality:
    # 是否启用数据质量检查
    enabled: true
    # 质量评分阈值
    score-threshold: 0.8
  # 血缘追踪配置
  lineage:
    # 是否启用血缘追踪
    enabled: true
    # 血缘数据保留天数
    retention-days: 90
  # 告警配置
  alert:
    # 是否启用告警
    enabled: true
    # 失败率告警阈值（百分比）
    failure-rate-threshold: 5
    # 延迟告警阈值（秒）
    delay-threshold: 600