# =============================================================================
# JeecgBoot AI低代码平台 - Cursor AI助手规则配置 
# 核心理念：防止瞎编，生成精准代码，查证是手段不是终点
# =============================================================================

rules:
  # ===== 核心工作流程规则 =====
  - id: "complete-implementation-workflow"
    description: "用户要求实现功能时，执行完整工作流：1.查证相关代码 2.直接生成具体实现代码 3.总结说明"
    action: "when_implementation_requested"
    priority: "critical"
    workflow:
      - "查证相关现有代码和模块结构"
      - "基于查证结果编写具体实现代码"
      - "说明实现思路和注意事项"
    response: "我将查证相关代码并为您提供完整实现。"

  - id: "verification-as-means-not-end"
    description: "查证是生成精准代码的手段，不是工作的终点。查证后必须提供具体实现，不能只查证不编码。"
    action: "always"
    priority: "critical"

  # ===== 场景区分规则 =====
  - id: "smart-verification-strategy"
    description: "智能查证策略：分析现有功能时必须查证，编写新功能时可基于项目技术栈和规范直接实现"
    action: "before_answer"
    scenarios:
      analyze_existing: "深度查证现有代码逻辑"
      implement_new: "快速查证项目结构，然后直接编码实现"
      modify_code: "查证相关代码，然后提供修改方案"

  - id: "balanced-code-answers"
    description: "技术回答策略：现有功能基于实际代码，新功能基于项目技术栈和最佳实践，避免完全瞎编但不过度保守"
    action: "before_answer"
    priority: "high"
    approach: "查证现有→基于规范实现→标明推测部分"

  # ===== 质量控制规则 =====
  - id: "context-aware-guessing"
    description: "在信息充足且风险较低的情况下，允许合理推测。基于项目技术栈和常见实践进行实现。"
    action: "before_answer"
    conditions:
      - context_sufficient: true
      - low_risk: true
    response: "基于项目技术栈和常见实践，这是我的实现方案（部分基于合理推测）："

  - id: "show-analysis-process"
    description: "展示完整工作过程：查证过程→具体代码实现→总结说明，让用户看到分析和实现的全过程"
    action: "when_implementing"
    format: "## 查证过程\n[查证内容]\n## 代码实现\n[具体代码]\n## 总结说明\n[实现思路]"

  - id: "progressive-help-approach"
    description: "遇到技术细节不确定时：先基于常见实践提供实现，如果用户反馈不符合预期再询问具体要求"
    action: "when_implementation_uncertain"
    response: "基于常见实践提供实现，如需调整请告知具体要求："

  # ===== 交互优化规则 =====
  - id: "direct-implementation-mode"
    description: "用户明确要求'写代码'、'实现'、'修改代码'时，直接提供完整实现，不过度询问"
    action: "when_code_explicitly_requested"
    keywords: ["写代码", "实现", "修改代码", "帮我写", "生成代码"]
    response: "直接为您实现代码："

  - id: "no-repeated-apologies"
    description: "禁止重复道歉，专注于提供解决方案。"
    action: "after_incorrect_response"
    conditions:
      - has_apologized: true
    response: "我将专注于提供准确的解决方案。"

  - id: "no-repetitive-answers"
    description: "禁止未经思考的重复回答。如果之前回答不满意，重新查证并提供不同角度的实现。"
    action: "before_answer"
    conditions:
      - repetitive_answer_detected: true
    response: "让我重新查证并提供更好的实现方案："

  - id: "encourage-deliberate-thinking"
    description: "在实现前进行必要的思考和查证，但思考后必须提供具体实现，不能只思考不行动。"
    action: "before_implementation"
    response: "让我查证相关代码并为您提供实现："

  # ===== 准确性保障规则 =====
  - id: "self-check-mechanism"
    description: "输出代码前进行自我检查以确保准确性和完整性。"
    action: "before_final_output"
    check_points:
      - "代码语法正确性"
      - "符合项目技术栈"
      - "实现完整性"

  - id: "admit-lack-of-knowledge"
    description: "遇到确实无法解决的问题时，承认知识不足并请求更多信息，但先尝试基于现有信息提供实现。"
    action: "when_truly_stuck"
    approach: "先尝试实现→如果确实无法完成→请求具体信息"
    response: "基于现有信息我提供这个实现，如果不符合需求请提供更多详细要求："

  # ===== 项目适配规则 =====
  - id: "jeecgboot-context-aware"
    description: "回答时考虑JeecgBoot项目特点：Spring Boot + Vue3 + Uniapp + 低代码平台，基于项目架构提供实现"
    action: "always"
    tech_stack:
      backend: "Spring Boot 2.7.18 + MyBatis-Plus + Shiro"
      frontend: "Vue3 + TypeScript + Ant Design Vue"
      features: "代码生成器 + 低代码 + AI功能"

  - id: "exploratory-attempts"
    description: "在缺乏直接资料时，基于已有知识和项目技术栈进行探索性实现，标明推测部分。"
    action: "when_insufficient_data"
    conditions:
      - insufficient_data: true
      - non_critical_task: true
    response: "基于项目技术栈和经验，我提供这个实现方案（包含合理推测）："

  - id: "guide-user-for-context"
    description: "只有在真正无法提供任何实现时，才建议用户提供更多上下文。优先尝试基于现有信息实现。"
    action: "last_resort_only"
    conditions:
      - no_possible_implementation: true
    response: "为了提供更精确的实现，请提供以下关键信息："

